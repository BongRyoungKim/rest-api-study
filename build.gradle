apply plugin: "java"
apply plugin: "war"
apply plugin: "jetty"
apply plugin: "eclipse"
apply plugin: "eclipse-wtp"
apply plugin: "idea"

sourceCompatibility = 1.7
compileJava.options.encoding = "UTF-8"

//repository
repositories {
    mavenCentral()
}

sourceSets {
    querydsl
}

configurations {
    querydslapt
}

eclipse {
    classpath {
        downloadSources = true
    }
}

idea {
    module {
        sourceDirs += file('src/main/querydsl')
    }
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

//version
def versions = [
        spring: "3.2.2.RELEASE",
        hibernate: "4.1.7.Final",
        springDataJpa: "1.2.0.RELEASE",
        springSecurity: "3.1.4.RELEASE",
        slf4j: "1.6.6",
        logback: "1.0.6",
        thymeleaf: "2.0.16",
        lombok: "0.12.0",
        boneCP: "0.7.1.RELEASE",
        googleGuava: "13.0.1",
        modelmapper: "0.5.6",
        querydsl: "3.2.1"
]

def paths = [
        querydsl: "src/main/querydsl"
]

def hibernate = [
        "org.hibernate:hibernate-core:${versions.hibernate}",
        "org.hibernate:hibernate-validator:4.3.0.Final",
        "org.hibernate:hibernate-entitymanager:${versions.hibernate}",
        "org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final"
]

sourceSets.querydsl.java.srcDirs = ["${paths.querydsl}"]

//의존성 라이브러리 목록
dependencies {
    compile "javax.inject:javax.inject:1"

    providedCompile("javax.servlet:javax.servlet-api:3.0.1")

    compile "org.springframework:spring-webmvc:${versions.spring}"
    compile "org.springframework:spring-core:${versions.spring}"
    compile "org.springframework:spring-context:${versions.spring}"
    compile "org.springframework:spring-aop:${versions.spring}"
    compile "org.springframework:spring-tx:${versions.spring}"
    compile "org.springframework:spring-aspects:${versions.spring}"
    compile "org.springframework:spring-jdbc:${versions.spring}"
    compile "org.springframework:spring-orm:${versions.spring}"
    compile "org.springframework:spring-web:${versions.spring}"
    compile "org.springframework:spring-webmvc:${versions.spring}"
    compile "org.springframework:spring-context-support:${versions.spring}"
    compile "org.springframework:spring-test:${versions.spring}"

    //spring-security
    compile "org.springframework.security:spring-security-core:${versions.springSecurity}"
    compile "org.springframework.security:spring-security-web:${versions.springSecurity}"
    compile "org.springframework.security:spring-security-config:${versions.springSecurity}"

    //spring-data-jpa
    compile("org.springframework.data:spring-data-jpa:${versions.springDataJpa}") {
        exclude group: "org.aspectj"
    }

    //QueryDsl : http://www.querydsl.com/
    compile "com.mysema.querydsl:querydsl-apt:${versions.querydsl}"
    compile "com.mysema.querydsl:querydsl-jpa:${versions.querydsl}"
    querydslapt "com.mysema.querydsl:querydsl-apt:${versions.querydsl}"

    //compile  : http://www.thymeleaf.org/
    compile "org.thymeleaf:thymeleaf:${versions.thymeleaf}"
    compile "org.thymeleaf:thymeleaf-spring3:${versions.thymeleaf}"

    compile "org.apache.commons:commons-lang3:3.1"

    //BoneCP : http://jolbox.com/
    compile "com.jolbox:bonecp:${versions.boneCP}"

    compile "org.slf4j:slf4j-api:${versions.slf4j}"
    runtime "org.slf4j:jcl-over-slf4j:${versions.slf4j}"
    runtime "org.slf4j:log4j-over-slf4j:${versions.slf4j}"

    compile "ch.qos.logback:logback-core:${versions.logback}"
    compile "ch.qos.logback:logback-classic:${versions.logback}"

    // Google Guava(Collection Utils) : http://code.google.com/p/guava-libraries/
    compile "com.google.guava:guava:${versions.googleGuava}"
    // Joda Time(Java date and time API) : http://joda-time.sourceforge.net/
    compile "joda-time:joda-time:2.1"

    compile "org.codehaus.jackson:jackson-core-asl:1.9.9"
    compile "org.codehaus.jackson:jackson-mapper-asl:1.9.9"
    // FasterXML/jackson-module-hibernate : https://github.com/FasterXML/jackson-module-hibernate
    compile "com.fasterxml.jackson.datatype:jackson-datatype-hibernate4:2.2.2"


    compile "com.h2database:h2:1.3.172"
    compile "postgresql:postgresql:9.1-901.jdbc4"
    compile "mysql:mysql-connector-java:5.1.25"

    compile "javax.servlet:jstl:1.2"

    compile "org.projectlombok:lombok:${versions.lombok}"
    //ModelMapper : http://modelmapper.org/
    compile "org.modelmapper:modelmapper:${versions.modelmapper}"

    hibernate.collect {
        compile(it) {
            exclude(group: "cglib", module: "cglib")
        }
    }

    testCompile group: "junit", name: "junit", version: "4.+"

    runtime "javax.servlet:jstl:1.1.2"
}


//-- QueryDSL
task generateQueryDSL(type: Compile, group: 'build', description: 'Generates the QueryDSL query types') {
    source = sourceSets.main.java
    classpath = configurations.compile + configurations.querydslapt
    options.compilerArgs = [
            "-proc:only",
            "-processor", "com.mysema.query.apt.jpa.JPAAnnotationProcessor"
    ]
    destinationDir = sourceSets.querydsl.java.srcDirs.iterator().next()
    dependencyCacheDir = compileJava.dependencyCacheDir
}
compileJava.dependsOn generateQueryDSL
//-- QueryDSL

//sourceSets.main.resources.srcDirs = ["src/main/resources", "src/main/resources/base", "src/main/resources/local", "src/main/resources/dev", "src/main/querydsl"]

task initProject << {
    createDir = {
        it.mkdirs();
    }

    sourceSets.main.resources.srcDirs = ["src/main/resources", "src/main/resources/base", "src/main/resources/local", "src/main/resources/dev", "src/main/querydsl"]
    sourceSets*.java.srcDirs*.each createDir
    sourceSets*.resources.srcDirs*.each createDir
    createDir webAppDir
    createDir new File(webAppDir, "/WEB-INF/views");

    processResources {
        from(sourceSets.main.resources.srcDirs) {
        }
    }
}

tasks.eclipse.dependsOn cleanEclipse
tasks.eclipse.dependsOn initProject

jettyRunWar.contextPath = ""

compileJava {
    dependsOn generateQueryDSL
    source generateQueryDSL.destinationDir
}

//compileGeneratedJava {
//    dependsOn generateQueryDSL
//    options.warnings = false
//    classpath += sourceSets.main.runtimeClasspath
//}

clean {
    delete sourceSets.querydsl.java.srcDirs
}