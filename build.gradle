apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'eclipse'
apply plugin: 'eclipse-wtp'

sourceCompatibility = 1.7
compileJava.options.encoding = 'UTF-8'

//repository
repositories {
	mavenCentral()
}

//version
def versions = [
    spring: "3.2.2.RELEASE",
    springDataJpa: "1.2.0.RELEASE",
    slf4j: "1.6.6",
    hibernate: "4.1.7.Final",
    logback: "1.0.6",
    thymeleaf: "2.0.16"
]

def hibernate = [
    "org.hibernate:hibernate-core:${versions.hibernate}",
    "org.hibernate:hibernate-validator:4.3.0.Final",
    "org.hibernate:hibernate-entitymanager:${versions.hibernate}",
    "org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final"]

//의존성 라이브러리 목록
dependencies {
	providedCompile("javax.servlet:javax.servlet-api:3.0.1")
	
   	compile "org.springframework:spring-webmvc:${versions.spring}"
	compile "org.springframework:spring-core:${versions.spring}"
    compile "org.springframework:spring-context:${versions.spring}"
    compile "org.springframework:spring-aop:${versions.spring}"
    compile "org.springframework:spring-tx:${versions.spring}"
    compile "org.springframework:spring-aspects:${versions.spring}"
    compile "org.springframework:spring-jdbc:${versions.spring}"
    compile "org.springframework:spring-orm:${versions.spring}"
    compile "org.springframework:spring-web:${versions.spring}"
    compile "org.springframework:spring-webmvc:${versions.spring}"
    compile "org.springframework:spring-context-support:${versions.spring}"
    compile "org.springframework:spring-test:${versions.spring}"
    
    compile("org.springframework.data:spring-data-jpa:${versions.springDataJpa}") {
        exclude group: "org.aspectj"
    }
    
	//compile "opensymphony:sitemesh:2.4.2"
    compile "org.thymeleaf:thymeleaf:${versions.thymeleaf}"
    compile "org.thymeleaf:thymeleaf-spring3:${versions.thymeleaf}"
    
    compile "commons-fileupload:commons-fileupload:1.2.2"
    compile "commons-digester:commons-digester:2.1"
    compile "commons-lang:commons-lang:2.6"
    compile "commons-codec:commons-codec:1.6"
    compile "commons-dbcp:commons-dbcp:1.4"
    
    compile "com.jolbox:bonecp:0.7.1.RELEASE"

    compile "org.slf4j:slf4j-api:${versions.slf4j}"
    runtime "org.slf4j:jcl-over-slf4j:${versions.slf4j}"
    runtime "org.slf4j:log4j-over-slf4j:${versions.slf4j}"

    compile "ch.qos.logback:logback-core:${versions.logback}"
    compile "ch.qos.logback:logback-classic:${versions.logback}"

    compile "com.google.guava:guava:13.0.1"
    compile "joda-time:joda-time:2.1"
    
    compile "org.codehaus.jackson:jackson-mapper-asl:1.9.9"

    compile "com.h2database:h2:1.3.172"
    compile "postgresql:postgresql:9.1-901.jdbc4"
	compile "mysql:mysql-connector-java:5.1.25"

    compile "javax.servlet:jstl:1.2"

   	compile 'cglib:cglib-nodep:2.2.2'
   	compile 'net.sf.ehcache:ehcache-core:2.4.6'
   
   	hibernate.collect {
        compile(it) {
            exclude(group: "cglib", module: "cglib")
        }
    }
    
	testCompile group : 'junit', name : 'junit', version : '4.+'

   	runtime 'javax.servlet:jstl:1.1.2'
}

sourceSets.main.resources.srcDirs = ["src/main/resources", "src/main/resources/dev", "src/main/resources/deploy"] 

task initProject << {
	createDir = {
		it.mkdirs();
	}
	
	sourceSets.main.resources.srcDirs = ["src/main/resources", "src/main/resources/dev", "src/main/resources/deploy"] 
	sourceSets*.java.srcDirs*.each createDir
	sourceSets*.resources.srcDirs*.each createDir
	createDir webAppDir
	createDir new File(webAppDir, '/WEB-INF/views');
	
	processResources {
		from(sourceSets.main.resources.srcDirs) {
		}
	}
}

tasks.eclipse.dependsOn cleanEclipse
tasks.eclipse.dependsOn initProject

jettyRunWar.contextPath = ''

eclipse {
	classpath {
		downloadSources = true
	}
}
